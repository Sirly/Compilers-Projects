# Postfix mathematical operation
# Created: 8/30/2017
# Updated: 8/31/2017
#
# Author(s):    Kevin Nakashima
#
#   Notes: variables can be more than one character long,
#       or use integers as non-variable values


def isOperand(c):
    if c == '+' or c == '-' or c == '/' or c == '*' or c =='^':
        return False
    else:
        return True

def Evaluate(num1,num2, operator):
    if(operator == "+"):
        return num1 + num2
    if(operator == "-"):
        return num1 - num2
    if(operator == "*"):
        return num1 * num2
    if(operator == "/"):
        return num1 / num2
    if(operator == "^"):
        return pow(num1,num2)

def main():
    
    goOn = True
    
    while(goOn):
        # declare/reset variables
        stack = []
        alpha = []
        dic = dict()

        # get string from user
        expression = input("Enter postfix expression followed by a '$': ")

        # separate string by words
        expression = expression.split(' ')

        #remove $
        expression = expression[:-1]

        # add expression variables without duplicates
        for variable in expression:
            if variable.isalpha() and variable not in alpha:
                alpha.append(variable)

        # prompt for variable values
        for variable in alpha:
            dic[variable] = eval(input("input value for " + variable + " : "))
        
        # operate
        for variable in expression:
            if isOperand(variable):
               # check if variable or given numerical value
                if variable in dic.keys():
                    stack.append(dic.get(variable))
                else:
                    stack.append(variable)
            else:
                # operand 2 is popped first, then operand 1
                op2 = stack.pop()
                op1 = stack.pop()
                # variable is the operator in function below
                answer = Evaluate(int(op1), int(op2), variable) 
                stack.append(answer)

        # print final value or error
        if len(stack) == 1:
            print("Final Value: " + str(stack[0]))
        else:
            print("Error with Postfix expression")

        # prompt for continuation
        cont = input("\tContinue(y/n)? ")
        if cont.lower() == 'n':
            goOn = False

if __name__ == "__main__":
    # calling main function
    main()
